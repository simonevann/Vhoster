package vhoster;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.StringTokenizer;

/**
 * Classe per la manipolazione del file hosts di windows
 * @author Simone Vannucci
 * @version 30.04.2021
 */
public class Host {
    
    //Parametri dei file di host Win e Apache
    private String ip = "127.0.0.1";
    private String pathHosts = "C:\\Windows\\System32\\drivers\\etc";
    private String pathApache = "C:\\xampp\\apache\\conf\\extra";
    //private String pathRootSite = "C:\\xampp\\htdocs";
    private String pathRootSite = "M:\\GitHub project";
    private String fileHosts  = "hosts";
    private String fileApache  = "httpd-vhosts.conf";
    private String chrSet = "UTF-8";
    //Parametri per la creazione delle liste nell'interfaccia
    private String siteName;
    private String[][] sites;
    //Sepparatore del file host Windows
    private String separator = "\t";
    //Contenuti dei file host Apache e Win
    private String fileHostsConts = "";
    private String fileApacheConts = "";
    //Parametri del file generato come placeholder del sito
    public static final String DEFAULTWEBSITENAME = "index.php";
    public static final String DEFAULTWEBSITECODE = "<h1>Default page generated by vHoster</h1>\n" +
                                                "<p>vHoster is created by Simone Vannucci</p>\n" +
                                                "<ul>\n" +
                                                "<li><a href=\"https://www.linkedin.com/in/simone-vannucci/\">Linkedin</a></li>\n" +
                                                "<li><a href=\"https://github.com/simonevann\">Github</a></li>\n" +
                                                "</ul>";
    
    /**
     * Aggiungi un nuovo host
     * @param url url del sito
     * @param path percorso di destinazione del sito
     */
    public void addHost(String url, String path){
        
        //Creo un backup
        Backup bk = new Backup();
        bk.createbackup();
        
        String pathSite = this.pathRootSite + "\\" + url;
        Path absHostWin = Paths.get(this.pathHosts);
        Path absApache = Paths.get(this.pathApache);
        Path absWebsite = Paths.get(pathSite);
        Path winHostFile = Paths.get(this.fileHosts);
        Path apacheFile = Paths.get(this.fileApache);
        Path websiteFile = Paths.get(Host.DEFAULTWEBSITENAME);
        Charset chr = Charset.forName(chrSet);       
        String textHost  = "";
        String textApache = "";
        String textWebsite = "";
        
        //Carico i dati dei vari file e creo la path per il sito
        try{
            textHost = Host.init(absHostWin.resolve(winHostFile),chr);
            textApache = Host.init(absApache.resolve(apacheFile),chr);
            textWebsite = Host.init(absWebsite.resolve(websiteFile),chr);
        } catch ( IOException e ){
            System.out.println( "Error in lettura " + e.getMessage() );
        }
        
        //Agigungo i dati al file di Host Windows
        textHost += "\n\t" + this.ip + "\t" + url;
        
        //Aggiungo i dati al file vHost di Apache
        String textTmpApache = "<VirtualHost *:80>\n" +
                                "\tDocumentRoot \"" + path + "\"\n" +
                                "\tServerName " + url + "\n" +
                                "\t<Directory \"" + path + "\">\n" +
                                "\t\tDirectoryIndex " + Host.DEFAULTWEBSITENAME + "\n" +
                                "\t\tAllowOverride All\n" +
                                "\t\tOrder allow,deny\n" +
                                "\t\tAllow from all\n" +
                                "\t</Directory>\n" +
                                "</VirtualHost>";
        textApache += "\n\n" + textTmpApache;
        
        //Aggiung i contenuti placeholder del sito
        textWebsite += Host.DEFAULTWEBSITECODE;
        
        //Scrivo i dati nei ripettivi file
        try{
            Host.writeFile(textHost, absHostWin.resolve(winHostFile),chr);
            Host.writeFile(textApache, absApache.resolve(apacheFile),chr);
            Host.writeFile(textWebsite, absWebsite.resolve(websiteFile),chr);
        } catch ( IOException e ){
            System.out.println( "Errore in scrittura" + e.getMessage() );
        }
        
        System.out.println("## Nuovo sito aggiunto ##");
        System.out.println("## Ricorda di riavviare il server Apache per "
                            + "rendere effettiva la modifica##");
        
    }
    
    //Posizioni e definizione dei dati negli array
    private static char ESCAPECHR = '#';
    private static char QUOTESCHR = '"';
    private static String OPENTAGVIRTUAL = "<VirtualHost";
    private static String CLOSETAGVIRTUAL = "</VirtualHost";
    private static String TAGSERVERNAME = "\tServerName";
    private static String TAGDOCUMENTROOT = "\tDocumentRoot";
    private static byte COLHOSTFILE = 3;
    private static byte COLAPACHEFILE = 3;
    public static byte COLIP = 0;
    public static byte COLURL = 1;
    public static byte COLPATH = 2;
    private static byte COLIPHOST = 1;
    private static byte COLURLHOST = 2;
    private static byte COLURLAPACHE = 0;
    private static byte COLPATHAPACHE = 1;
    private static byte ROWTMPLIST = 1;
    
    public void delHost(String url){
        
        //Faccio il backup
        Backup bk = new Backup();
        bk.createbackup();
        
        String token, fileResultHost = "", fileResultApache = "", tmpFileResultApache = "";
        int numToken = 0;
        int i = 0;
        
        //Individuo la linea del file host da eliminare e la tralascio
        String dataHost = getPlainData(this.pathHosts,this.fileHosts);
        StringTokenizer str = new StringTokenizer(dataHost,"\n",false);
        numToken = str.countTokens();
        String[][] tmpSites = new String[ROWTMPLIST][COLHOSTFILE];
        while (str.hasMoreTokens()) {
            token = str.nextToken();          
            if (token.charAt(0) != ESCAPECHR){
                tmpSites[0] = token.split(this.separator);
                if (!tmpSites[0][COLURLHOST].equals(url)){
                    fileResultHost += token + "\n";                
                }
            } else {
                fileResultHost += token + "\n";
            }
        }
        
        //Individuo la parte del file vhost da eliminare e la tralascio       
        boolean isInVirtuaHost = true;
        boolean toDelete = false;
        String dataApache = getPlainData(this.pathApache,this.fileApache);
        StringTokenizer strApache = new StringTokenizer(dataApache,"\n",false);
        numToken = strApache.countTokens();
        while (strApache.hasMoreTokens()) {
            token = strApache.nextToken();          
            if (token.charAt(0) != ESCAPECHR){
                if (token.length() >= 11){
                    if(token.substring(0, OPENTAGVIRTUAL.length()).equals(OPENTAGVIRTUAL)){
                        isInVirtuaHost = true;
                        tmpFileResultApache += "\n";
                    } else if (token.substring(0, CLOSETAGVIRTUAL.length()).equals(CLOSETAGVIRTUAL)){
                        isInVirtuaHost = false;
                    }                  
                    if(isInVirtuaHost){
                        if(token.substring(12).equals(url)){
                            toDelete = true;
                        }
                    }                   
                }               
                if (isInVirtuaHost){
                    tmpFileResultApache += token + "\n";
                } else if (!isInVirtuaHost && toDelete){
                    tmpFileResultApache += token + "\n";
                    tmpFileResultApache = "";
                    toDelete = false;
                } else if (!isInVirtuaHost && !toDelete){
                    tmpFileResultApache += token + "\n";
                    fileResultApache += tmpFileResultApache; 
                    tmpFileResultApache = "";
                } else {
                    fileResultApache += token + "\n";
                }
            } else {
                fileResultApache += token + "\n";
            }
        }

        Path absHostWin = Paths.get(this.pathHosts);
        Path absApache = Paths.get(this.pathApache);
        Path winHostFile = Paths.get(this.fileHosts);
        Path apacheFile = Paths.get(this.fileApache);
        Charset chr = Charset.forName(chrSet);          
        
        //Scrivo i nuovi contenuti nei rispettivi file
        try{
            Host.writeFile(fileResultHost, absHostWin.resolve(winHostFile),chr);
            Host.writeFile(fileResultApache, absApache.resolve(apacheFile),chr);
        } catch ( IOException e ){
            System.out.println( "Errore in scrittura" + e.getMessage() );
        }
        
        System.out.println("## Sito cancellato con successo ##");
        System.out.println("## Ricorda di riavviare il server Apache per "
                            + "rendere effettiva la modifica##");    
    }
    
    /**
     * Faccio il restore dei file host
     */
    public void restoreBackeupHost(){
        
        Backup bk = new Backup();
        bk.restore();
        System.out.println("## Ultimo salvataggio ripristinato ##");
        System.out.println("## Ricorda di riavviare il server Apache per "
                            + "rendere effettiva la modifica##");   
    }
    
    /**
     * Restituico se il sito richiesto esiste oppure no nei file host
     * @param url url da cercare
     * @return true se il sito esiste, false se non esiste
     */
    public boolean hasHosts(String url){
        
        String sites[][] = getAllHosts();
        for (int i = 0; i < sites.length; i++) {
            if (sites[i][COLURL].equals(url)){
                return true;
            }
        }
        return false;
    
    }
    
    /**
     * Restituico tutti gli host configurati
     * @return [0] IP, [1] URL
     */
    public String[][] getAllHosts(){
        
        return getHostsData();
        
    }
    
    //Scelta tipologia di file
    public static char WINHOSTSELECT = 'w';
    public static char APACHEHOSTSELECT = 'a';
    public static char WEBSITESELECT = 's';
    
    /**
     * Configuro la path
     * @param path percorso
     * @param c di quale file di vuole configurare 
     *          [w] Host Windows [a] vHost Apache [s] root sito
     */
    public void setPath(String path, char c){
        
        if (c == WINHOSTSELECT){
            this.pathHosts = path;
        } else if (c == APACHEHOSTSELECT){
            this.pathApache = path;
        } else if (c == WEBSITESELECT){
            this.pathRootSite = path;
        } else {
            System.out.println("Valore errato nel parametro c");
        }
        
    }
    
    /**
     * Configuro il nome del file
     * @param file nome file
     * @param c di quale file di vuole configurare
     * [        [w] Host Windows [a] vHost Apache
     */
    public void setFile(String file, char c){
    
        if (c == WINHOSTSELECT){
            this.fileHosts = file;
        } else if (c == APACHEHOSTSELECT){
            this.fileApache = file;
        } else {
            System.out.println("Valore errato nel parametro c");
        }
    
    }
    
    /**
     * Quale charset si vuole usare
     * @param chr 
     */
    public void setCharset(String chr){
    
        this.chrSet = chr;
    
    }
    
    /**
     * Configura l'ip della destinazione dei host
     * @param ip 
     */
    public void setIp(String ip){
    
        this.ip = ip;
    
    }
    
    /**
     * Configura il nome del sito
     * @param site 
     */
    public void setSiteName(String site){
    
        this.siteName = site;
    
    }
    
    /**
     * Carica i contenuti del file host di Windows
     */
    public void loadFileHostsConts(){
        
        getPlainData(this.pathHosts,this.fileHosts);
        
    }
    
    /**
     * Carica i contenuti del file vhost di Apache
     */
    public void loadFileApacheConts(){
        
        getPlainData(this.pathApache,this.fileApache);
        
    };
    
    /**
     * Restituice la path del file desiderato
     * @param c di quale file di vuole vedere la path 
     *          [w] Host Windows [a] vHost Apache [s] root sito
     * @return percorso
     */
    public String getPath(char c){
    
        if (c == WINHOSTSELECT){
            return this.pathHosts;
        } else if (c == APACHEHOSTSELECT){
            return this.pathApache;
        } else if (c == WEBSITESELECT){
            return this.pathRootSite;
        } else {
            return "Valore errato nel parametro c";
        }
    
    }
    
    /**
     * Restituice il nome del file
     * @param c di quale file si vuole vedere il nome
     * [        [w] Host Windows [a] vHost Apache
     * @return nome file
     */
    public String getFile(char c){
    
        if (c == WINHOSTSELECT){
            return fileHosts;
        } else if (c == APACHEHOSTSELECT){
            return this.fileApache;
        } else {
            return "Valore errato nel parametro c";
        }
    
    }
    
    /**
     * Restituisce l'ip di destinazione
     * @return ip
     */
    public String getIp(){
    
        return this.ip;
    
    }
    
    /**
     * Restituisce il charset
     * @return charset
     */
    public String getCharset(){
    
        return this.chrSet;
    
    }
    
    /**
     * Restituisce il nome del sito
     * @return nome sito
     */
    public String getSiteName(){
    
        return this.siteName;
    
    }
    
    /**
     * Restituisce i contenuti del file host windows
     * @return contenuti
     */
    public String getFileHostsConts(){
        
        return this.fileHostsConts;
        
    }
    
    /**
     * Restituisce i contenuti del file vhost Apache
     * @return contenuti
     */
    public String getFileApacheConts(){
        
        return this.fileApacheConts;
        
    };
    
    /**
     * Crea una stringa contenente i dati del file richiesto
     * @param pathHosts percorso del file
     * @param fileHosts nome del file
     * @return stringa del contenuto del file richiesto
     */
    private String getPlainData(String pathHosts, String fileHosts){

        String s;        
        Path baseDir = Paths.get(pathHosts); 
        Path dataFile = Paths.get(fileHosts);     
        Path file = baseDir.resolve(dataFile);
        Charset chr = Charset.forName(this.chrSet);
        
        // Leggo il file
        try {
            byte[] fileByte = Files.readAllBytes(file);
            s = new String(fileByte,chr);  
            s = s.replaceAll("\r", "\n");
        } catch(IOException e) {
            System.out.println(e.getMessage());
            String err = "!Error!";
            return err;
        }
        
        return s;
    }
    
    /**
    * Unisce i dati del file hosts di Windows e vhost di Apache, in seguito 
    * ritorna un array con i dati degli host
    * @return [0]ip [1]url [2]path sito
    */
    private String[][] getHostsData(){
        
        String[][] winHost = getWinHostsData();
        String[][] apaHost = getVirtualHostsData();
        String[][] hosts = new String[winHost.length][COLHOSTFILE];
        
        for (int i = 0; i < winHost.length; i++) {
            String siteWin = winHost[i][COLURL];
            for (int j = 0; j < apaHost.length; j++) {
                String siteApa = apaHost[j][COLURLAPACHE];
                if(siteWin.equals(siteApa)){
                    hosts[i][COLIP] = winHost[i][COLIP];
                    hosts[i][COLURL] = winHost[i][COLURL];
                    hosts[i][COLPATH] = apaHost[j][COLPATHAPACHE];
                }
            }
        }
        
        return hosts;
    
    }
    
    /**
     * Restituisce i file di host attivi su Windows
     * @return host attivi [0] IP, [1] nome sito
     */
    private String[][] getWinHostsData(){
        
        String token;
        int numToken = 0;
        int i = 0;
        String data = getPlainData(this.pathHosts,this.fileHosts);
        StringTokenizer str = new StringTokenizer(data,"\n",false);
        numToken = str.countTokens();
        String[][] tmpSites = new String[numToken][COLHOSTFILE];
        
        while (str.hasMoreTokens()) {
            token = str.nextToken();
            if (token.charAt(0) != ESCAPECHR){
                tmpSites[i] = token.split(this.separator);
                i++;
            }           
        }
        
        //Riduco l'array
        String[][] sites = new String[i][COLHOSTFILE-1];        
        for (int j = 0; j < sites.length; j++) {
            sites[j][COLIP] = tmpSites[j][COLIPHOST];
            sites[j][COLURL] = tmpSites[j][COLURLHOST]; 
        }
        
        return sites;        
    
    }
    
    /**
     * Restituisce i file di vhost attivi su Apache
     * @return vhost attivi [0] nome sito, [1] path di root
     */
    private String[][] getVirtualHostsData(){
        String token;
        int numToken = 0;
        int i = 0;
        boolean isInVirtuaHost = true;
        String data = getPlainData(this.pathApache,this.fileApache);
        StringTokenizer str = new StringTokenizer(data,"\n",false);
        numToken = str.countTokens();
        String[][] tmpSites = new String[numToken][COLHOSTFILE];
        
        while (str.hasMoreTokens()) {
            token = str.nextToken();
            if (token.charAt(0) != ESCAPECHR){
                if (token.length() >= 11){
                    if(token.substring(0, OPENTAGVIRTUAL.length()).equals(OPENTAGVIRTUAL)){
                        isInVirtuaHost = true;                       
                    } else if (token.substring(0, CLOSETAGVIRTUAL.length()).equals(CLOSETAGVIRTUAL)){
                        isInVirtuaHost = false;
                    }                   
                    if(isInVirtuaHost){
                        if(token.substring(0, TAGSERVERNAME.length()).equals(TAGSERVERNAME)){
                            tmpSites[i][COLURLAPACHE] = token.substring(TAGSERVERNAME.length()).trim();
                            i++;
                        } else if (token.substring(0, TAGDOCUMENTROOT.length()).equals(TAGDOCUMENTROOT)){
                            String directoryTmp = token.substring(TAGDOCUMENTROOT.length()).trim();
                            String directory = "";
                            for (int j = 0; j < directoryTmp.length(); j++) {
                                char charDir = directoryTmp.charAt(j);
                                if(charDir == QUOTESCHR){
                                } else {
                                   directory += charDir;                              
                                }
                            }
                            tmpSites[i][COLPATHAPACHE] = directory;
                        }
                    }
                }
            }           
        }
        
        //Riduco l'array
        String[][] sites = new String[i][COLAPACHEFILE];        
        for (int j = 0; j < sites.length; j++) {
            sites[j][COLURLAPACHE] = tmpSites[j][COLURLAPACHE];
            sites[j][COLPATHAPACHE] = tmpSites[j][COLPATHAPACHE]; 
        }
        return sites;   
    }
    
   /**
     * Creo il file se non esiste e carico il testo
     * @param file localizzazione del file da caricare
     * @param chr charset del file
     * @throws IOException
     * @return stringa di testo
     */
    public static String init( Path file, Charset chr ) throws IOException{
        
       if( !Files.exists(file)){
           createPath(file);
       }
       return loadText(file, chr);
       
    }
    
    /**
     * Crea persorso e file
     * @param dir percorso assoluto
     * @throws IOException 
     */
    public static void createPath(Path dir) throws IOException {
        
            Files.createDirectories(dir.getParent());
            Files.createFile(dir);
            
    }
    
    /**
     * Carico file di testo
     * @param file localizzazione del file da caricare
     * @param chr charset del file
     * @return stringa di testo
     */
    public static String loadText( Path file, Charset chr ) throws IOException {
    
        byte[] fileTmp = Files.readAllBytes(file);
        String str = new String(fileTmp,chr);
        return str;     
        
    }
    
    /**
     * Scrivo i contenuti sul file
     * @param str contenuti da scrivere
     * @param file percorso file
     * @param chr charset
     * @throws IOException 
     */
    public static void writeFile( String str, Path file, Charset chr ) 
                                  throws IOException {
        
       if( !Files.exists(file)){
           createPath(file);
       }
       byte[] stats = str.getBytes(chr);
       Files.write(file, stats);
      
    }
        
}
